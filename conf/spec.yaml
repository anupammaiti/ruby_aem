bundle:
  responses:
    404:
      handler: simple_error
      message: 'Bundle %{name} not found'
  actions:
    start:
      api: console
      operation: postBundle
      params:
        required:
          name: '%{name}'
          action: start
      responses:
        200:
          handler: simple
          message: 'Bundle %{name} started'
    stop:
      api: console
      operation: postBundle
      params:
        required:
          name: '%{name}'
          action: stop
      responses:
        200:
          handler: simple
          message: 'Bundle %{name} stopped'
flushagent:
  responses:
    404:
      handler: simple_error
      message: 'Flush agent %{name} not found on %{run_mode}'
  actions:
    create_update:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          jcrprimary_type: cq:Page
          jcrcontentcqname: '%{name}'
          jcrcontentjcrtitle: '%{title}'
          jcrcontentjcrdescription: '%{description}'
          jcrcontentslingresource_type: /libs/cq/replication/components/agent
          jcrcontenttransport_uri: '%{dest_base_url}/dispatcher/invalidate.cache'
          jcrcontentlog_level: '%{log_level}'
          jcrcontentno_versioning: true
          jcrcontentprotocol_http_headers:
            - 'CQ-Action:{action}'
            - 'CQ-Handle:{path}'
            - 'CQ-Path:{path}'
          jcrcontentprotocol_http_headers_type_hint: String[]
          jcrcontentprotocol_http_method: GET
          jcrcontentretry_delay: '%{retry_delay}'
          jcrcontentserialization_type: flush
          jcrcontentjcrmixin_types: cq:ReplicationStatus
          jcrcontenttrigger_receive: true
          jcrcontenttrigger_specific: true
          jcrcontentcqtemplate: /libs/cq/replication/templates/agent
          jcrcontentenabled: true
      responses:
        200:
          handler: simple
          message: 'Flush agent %{name} updated on %{run_mode}'
        201:
          handler: simple
          message: 'Flush agent %{name} created on %{run_mode}'
    delete:
      api: sling
      operation: deleteAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        204:
          handler: simple
          message: 'Flush agent %{name} deleted on %{run_mode}'
    exists:
      api: sling
      operation: getAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Flush agent %{name} exists on %{run_mode}'
        404:
          handler: simple_false
          message: 'Flush agent %{name} not found on %{run_mode}'
group:
  responses:
    404:
      handler: simple_error
      message: 'Group %{name} not found'
  actions:
    create:
      api: sling
      operation: postAuthorizables
      params:
        required:
          authorizable_id: '%{name}'
          intermediate_path: '%{path}'
        optional:
          create_group: ''
          profilegiven_name: '%{name}'
      responses:
        201:
          handler: html_authorizable_id
          message: 'Group %{name} created at %{path}/%{authorizable_id}'
    find_authorizable_id:
      api: sling
      operation: postQuery
      params:
        required:
          path: '%{path}'
          p_limit: '-1'
          _1_property: rep:authorizableId
          _1_property_value: '%{name}'
      responses:
        200:
          handler: json_authorizable_id
          message: 'Found group %{name} authorizable ID %{authorizable_id}'
        404:
          handler: simple_nil
          message: 'Group %{name} not found'
    delete:
      api: sling
      operation: deleteNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
      responses:
        204:
          handler: simple
          message: 'Group %{name} deleted at /%{path}/%{authorizable_id}'
    exists:
      api: sling
      operation: getNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
      responses:
        302:
          handler: simple_true
          message: 'Group %{name} exists at /%{path}/%{authorizable_id}'
        404:
          handler: simple_false
          message: 'Group %{name} not found'
    set_permission:
      api: cq
      operation: postCqActions
      params:
        required:
          authorizable_id: '%{name}'
          changelog: 'path:%{permission_path},%{permission_csv}'
      responses:
        200:
          handler: simple
          message: 'Permission %{permission_csv} on path %{permission_path} set for group %{name}'
    add_member:
      api: sling
      operation: postNodeRw
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
        optional:
          add_members: '%{member}'
      responses:
        200:
          handler: simple
          message: 'User/group %{member} added to group %{name}'
node:
  responses:
    404:
      handler: simple_error
      message: 'Node %{path}/%{name} not found'
  actions:
    create:
      api: sling
      operation: postPath
      params:
        required:
          path: '%{path}'
          jcrprimary_type: '%{type}'
          name: '%{name}'
      responses:
        201:
          handler: simple
          message: 'Node %{path}/%{name} created'
    delete:
      api: sling
      operation: deleteNode
      params:
        required:
          path: '%{path}'
          name: '%{name}'
      responses:
        204:
          handler: simple
          message: 'Node %{path}/%{name} deleted'
    exists:
      api: sling
      operation: getNode
      params:
        required:
          path: '%{path}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Node %{path}/%{name} exists'
        404:
          handler: simple_false
          message: 'Node %{path}/%{name} not found'
package:
  actions:
    create:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}'
          cmd: create
        optional:
          group_name: '%{group_name}'
          package_name: '%{package_name}'
          package_version: '%{package_version}'
          charset: utf-8
      responses:
        200:
          handler: json_package_service
    update:
      api: crx
      operation: postPackageUpdate
      params:
        required:
          groupName: '%{group_name}'
          packageName: '%{package_name}'
          version: '%{package_version}'
          path: '/etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
        optional:
          filter: '%{filter}'
          charset: utf-8
      responses:
        200:
          handler: json_package_service
    delete:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: delete
      responses:
        200:
          handler: json_package_service
    build:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: build
      responses:
        200:
          handler: json_package_service
    install:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: install
      responses:
        200:
          handler: json_package_service
    replicate:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: 'etc/packages/%{group_name}/%{package_name}-%{package_version}.zip'
          cmd: replicate
      responses:
        200:
          handler: json_package_service
    download:
      api: sling
      operation: getPackage
      params:
        required:
          group: '%{group_name}'
          name: '%{package_name}'
          version: '%{package_version}'
      responses:
        200:
          handler: file_download
          message: 'Package downloaded to %{file_path}/%{package_name}-%{package_version}.zip'
    upload:
      api: crx
      operation: postPackageServiceJson
      params:
        required:
          path: ''
          cmd: upload
        optional:
          force: '%{force}'
          package: __FILE__
      responses:
        200:
          handler: json_package_service
    get_filter:
      api: sling
      operation: getPackageFilter
      params:
        required:
          group: '%{group_name}'
          name: '%{package_name}'
          version: '%{package_version}'
      responses:
        200:
          handler: json_package_filter
          message: 'Filter retrieved successfully'
    list_all:
      api: crx
      operation: postPackageService
      params:
        required:
          cmd: ls
      responses:
        200:
          handler: xml_package_list
          message: 'Package list retrieved successfully'
path:
  actions:
    activate:
      api: sling
      operation: postTreeActivation
      params:
        required:
          ignoredeactivated: '%{ignoredeactivated}'
          onlymodified: '%{onlymodified}'
          path: '%{name}'
      responses:
        200:
          handler: simple
          message: 'Path %{name} activated'
configproperty:
  actions:
    create:
      api: sling
      operation: postPath
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          - org_apache_felix_https_nio
          - org_apache_felix_https_nio_type_hint
          - org_apache_felix_https_keystore
          - org_apache_felix_https_keystore_type_hint
          - org_apache_felix_https_keystore_password
          - org_apache_felix_https_keystore_password_type_hint
          - org_apache_felix_https_keystore_key
          - org_apache_felix_https_keystore_key_type_hint
          - org_apache_felix_https_keystore_key_password
          - org_apache_felix_https_keystore_key_password_type_hint
          - org_apache_felix_https_truststore
          - org_apache_felix_https_truststore_key_type_hint
          - org_apache_felix_https_truststore_password
          - org_apache_felix_https_truststore_password_type_hint
          - org_apache_felix_https_clientcertificate
          - org_apache_felix_https_clientcertificate_type_hint
          - org_apache_felix_https_enable
          - org_apache_felix_https_enable_type_hint
          - org_osgi_service_http_port_secure
          - org_osgi_service_http_port_secure_type_hint
      responses:
        200:
          handler: simple
          message: 'Set %{run_mode} config %{type} property %{name}=%{value}'
        201:
          handler: simple
          message: 'Set %{run_mode} config %{type} property %{name}=%{value}'
replicationagent:
  responses:
    404:
      handler: simple_error
      message: 'Replication agent %{name} not found on %{run_mode}'
  actions:
    create_update:
      api: sling
      operation: postAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
        optional:
          jcrprimary_type: cq:Page
          jcrcontentcqname: '%{name}'
          jcrcontentjcrtitle: '%{title}'
          jcrcontentjcrdescription: '%{description}'
          jcrcontentslingresource_type: /libs/cq/replication/components/agent
          jcrcontentserialization_type: durbo
          jcrcontenttransport_uri: '%{dest_base_url}/bin/receive?sling:authRequestLogin=1'
          jcrcontenttransport_user: '%{transport_user}'
          jcrcontenttransport_password: '%{transport_password}'
          jcrcontentlog_level: '%{log_level}'
          jcrcontentretry_delay: '%{retry_delay}'
          jcrcontentcqtemplate: /libs/cq/replication/templates/agent
          jcrcontentenabled: true
      responses:
        200:
          handler: simple
          message: 'Replication agent %{name} updated on %{run_mode}'
        201:
          handler: simple
          message: 'Replication agent %{name} created on %{run_mode}'
    delete:
      api: sling
      operation: deleteAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        204:
          handler: simple
          message: 'Replication agent %{name} deleted on %{run_mode}'
    exists:
      api: sling
      operation: getAgent
      params:
        required:
          runmode: '%{run_mode}'
          name: '%{name}'
      responses:
        302:
          handler: simple_true
          message: 'Replication agent %{name} exists on %{run_mode}'
        404:
          handler: simple_false
          message: 'Replication agent %{name} not found on %{run_mode}'
repository:
  actions:
    block_writes:
      api: console
      operation: postJmxRepository
      params:
        required:
          action: blockRepositoryWrites
      responses:
        200:
          handler: simple
          message: 'Repository writes blocked'
    unblock_writes:
      api: console
      operation: postJmxRepository
      params:
        required:
          action: unblockRepositoryWrites
      responses:
        200:
          handler: simple
          message: 'Repository writes unblocked'
user:
  responses:
    404:
      handler: simple_error
      message: 'User %{name} not found'
  actions:
    create:
      api: sling
      operation: postAuthorizables
      params:
        required:
          authorizable_id: '%{name}'
          intermediate_path: '%{path}'
        optional:
          create_user: ''
          reppassword: '%{password}'
      responses:
        201:
          handler: html_authorizable_id
          message: 'User %{name} created at %{path}/%{authorizable_id}'
    find_authorizable_id:
      api: sling
      operation: postQuery
      params:
        required:
          path: '%{path}'
          p_limit: '-1'
          _1_property: rep:authorizableId
          _1_property_value: '%{name}'
      responses:
        200:
          handler: json_authorizable_id
          message: 'Found user %{name} authorizable ID %{authorizable_id}'
        404:
          handler: simple_nil
          message: 'User %{name} not found'
    delete:
      api: sling
      operation: deleteNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
      responses:
        204:
          handler: simple
          message: 'User %{name} deleted at /%{path}/%{authorizable_id}'
    exists:
      api: sling
      operation: getNode
      params:
        required:
          path: '%{path}'
          name: '%{authorizable_id}'
      responses:
        302:
          handler: simple_true
          message: 'User %{name} exists at /%{path}/%{authorizable_id}'
        404:
          handler: simple_false
          message: 'User %{name} not found'
    set_permission:
      api: cq
      operation: postCqActions
      params:
        required:
          authorizable_id: '%{name}'
          changelog: 'path:%{permission_path},%{permission_csv}'
      responses:
        200:
          handler: simple
          message: 'Permission %{permission_csv} on path %{permission_path} set for user %{name}'
    change_password:
      api: crx
      operation: postSetPassword
      params:
        required:
          old: '%{old_password}'
          plain: '%{new_password}'
          verify: '%{new_password}'
      responses:
        200:
          handler: simple
          message: 'Logged in user password changed'
